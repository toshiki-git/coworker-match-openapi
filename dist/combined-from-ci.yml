openapi: 3.0.0
info:
  title: CoWorkerMatch API
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local Server
tags:
  - name: Users
    description: ユーザに関する操作
  - name: Hobbies
    description: 趣味に関する操作
  - name: UserHobbies
    description: ユーザの趣味に関する操作
  - name: Matchings
    description: マッチングに関する操作
  - name: MatchingQuestions
    description: 2択の質問に関する操作
  - name: QuestionCards
    description: 質問カードに関する操作
  - name: Messages
    description: メッセージに関する操作
paths:
  /users:
    post:
      summary: Create a  new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserReq'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserRes'
    put:
      tags:
        - Users
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserReq'
      responses:
        '200':
          description: 2回目以降ユーザがログインしたときに、Googleのアカウントの名前などが変更されている場合に情報を更新する or 単純にline_accountなどを追加・更新する時に呼ばれる。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserRes'
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user_idからユーザ取得
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserRes'
  /hobbies:
    get:
      tags:
        - Hobbies
      summary: Get All hobbies with categories
      responses:
        '200':
          description: List of all hobbies with categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHobbyRes'
    post:
      summary: Create a new hobby
      tags:
        - Hobbies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHobbyReq'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateHobbyRes'
  /user-hobbies:
    post:
      summary: Create user new hobbies
      tags:
        - UserHobbies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserHobbyReq'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserHobbyRes'
    put:
      tags:
        - UserHobbies
      summary: Update user hobbies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserHobbyReq'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserHobbyRes'
  /user-hobbies/{userId}:
    get:
      tags:
        - UserHobbies
      summary: Get all hobbies of a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user_idからユーザ取得
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserHobbyRes'
  /matchings:
    get:
      tags:
        - Matchings
      summary: Get All matchings
      responses:
        '200':
          description: List of all matchings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMatchingRes'
  /matchings/{matchingId}:
    get:
      tags:
        - Matchings
      summary: Get match user
      parameters:
        - name: matchingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get match user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMatchingUserRes'
  /matching-questions:
    post:
      summary: Create a new matching
      tags:
        - MatchingQuestions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestionReq'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateQuestionRes'
    get:
      tags:
        - MatchingQuestions
      summary: Get user questions
      responses:
        '200':
          description: List of all questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQuestionRes'
  /question-cards/{matchingId}:
    get:
      tags:
        - QuestionCards
      summary: Get User Questions
      parameters:
        - name: matchingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of all questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQuestionCardRes'
  /messages/{matchingId}:
    post:
      tags:
        - Messages
      summary: Create a new message
      parameters:
        - name: matchingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageReq'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMessageRes'
    get:
      tags:
        - Messages
      summary: Get all messages for a matching
      parameters:
        - name: matchingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of all messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMessageRes'
  /messages/{messageId}:
    put:
      tags:
        - Messages
      summary: Update a message
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessageReq'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMessageRes'
components:
  schemas:
    UserBase:
      type: object
      properties:
        userName:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
      required:
        - userName
        - email
        - avatarUrl
    UpdateUserReq:
      allOf:
        - $ref: '#/components/schemas/UserBase'
    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        userName:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
      required:
        - userId
        - userName
        - email
        - avatarUrl
    UpdateUserRes:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
    CreateUserReq:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserBase'
    CreateUserRes:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
    GetUserRes:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
    Category:
      type: object
      properties:
        categoryId:
          type: string
          format: uuid
        categoryName:
          type: string
      required:
        - categoryId
        - categoryName
    Hobby:
      type: object
      properties:
        hobbyId:
          type: string
          format: uuid
        hobbyName:
          type: string
      required:
        - hobbyId
        - hobbyName
    GetHobbyRes:
      type: object
      properties:
        hobbyGroups:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Category'
              - type: object
                properties:
                  hobbies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hobby'
                required:
                  - hobbies
    CreateHobbyReq:
      type: object
      properties:
        creatorId:
          type: string
        hobbyName:
          type: string
        categoryId:
          type: string
          format: uuid
      required:
        - creatorId
        - hobbyName
        - categoryId
    HobbyDetails:
      type: object
      properties:
        hobbyId:
          type: string
          format: uuid
        hobbyName:
          type: string
        creatorId:
          type: string
        categoryId:
          type: string
          format: uuid
      required:
        - hobbyId
        - hobbyName
        - creatorId
        - categoryId
    CreateHobbyRes:
      type: object
      allOf:
        - $ref: '#/components/schemas/HobbyDetails'
    UserHobby:
      type: object
      properties:
        hobbyIds:
          type: array
          items:
            type: string
            format: uuid
      required:
        - hobbyIds
    UpdateUserHobbyReq:
      allOf:
        - $ref: '#/components/schemas/UserHobby'
    UpdateUserHobbyRes:
      allOf:
        - $ref: '#/components/schemas/UserHobby'
    CreateUserHobbyReq:
      allOf:
        - $ref: '#/components/schemas/UserHobby'
    CreateUserHobbyRes:
      allOf:
        - $ref: '#/components/schemas/UserHobby'
    GetUserHobbyRes:
      type: object
      properties:
        hobbies:
          type: array
          items:
            $ref: '#/components/schemas/Hobby'
    GetMatchingRes:
      type: object
      properties:
        matchings:
          type: array
          items:
            type: object
            properties:
              matchingId:
                type: string
                format: uuid
              avatarUrl:
                type: string
              matchUserName:
                type: string
              lastMessage:
                type: string
              unreadMessageCount:
                type: integer
            required:
              - matchingId
              - avatarUrl
              - matchUserName
              - lastMessage
              - unreadMessageCount
    GetMatchingUserRes:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
    Choice:
      type: object
      properties:
        choiceText:
          type: string
          example: 'yes'
        choiceImageUrl:
          type: string
      required:
        - choiceText
        - choiceImageUrl
    Question:
      type: object
      properties:
        questionId:
          type: string
          format: uuid
        questionText:
          type: string
        choice1:
          $ref: '#/components/schemas/Choice'
        choice2:
          $ref: '#/components/schemas/Choice'
      required:
        - questionId
        - questionText
        - choice1
        - choice2
    GetQuestionRes:
      type: object
      properties:
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    Answer:
      type: object
      properties:
        questionId:
          type: string
          format: uuid
        answer:
          type: string
          example: 'yes'
      required:
        - questionId
        - answer
    CreateQuestionReq:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
      required:
        - answers
    CreateQuestionRes:
      type: object
      properties:
        matchingId:
          type: string
          format: uuid
        senderUserId:
          type: string
        receiverUserId:
          type: string
        matchingDate:
          type: string
          format: date-time
      required:
        - matchingId
        - senderUserId
        - receiverUserId
        - matchingDate
    GetQuestionCardRes:
      type: object
      properties:
        questionCards:
          type: array
          items:
            type: object
            properties:
              questionCardId:
                type: string
                format: uuid
              questionCardText:
                type: string
              isUsed:
                type: boolean
            required:
              - questionCardId
              - questionCardText
              - isUsed
    Message:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
        messageText:
          type: string
      required:
        - messageId
        - messageText
    GetMessageRes:
      type: object
      properties:
        messages:
          type: array
          items:
            type: object
            properties:
              questionCardId:
                type: string
                format: uuid
              questionCardText:
                type: string
              messagePair:
                type: object
                properties:
                  me:
                    $ref: '#/components/schemas/Message'
                  you:
                    $ref: '#/components/schemas/Message'
                required:
                  - me
                  - you
            required:
              - questionCardId
              - questionCardText
              - messagePair
      required:
        - messages
    CreateMessageReq:
      type: object
      properties:
        questionCardId:
          type: string
          format: uuid
      required:
        - questionCardId
    CreateMessageRes:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
      required:
        - messageId
    UpdateMessageReq:
      type: object
      properties:
        messageText:
          type: string
      required:
        - messageText
    UpdateMessageRes:
      type: object
      properties:
        messageText:
          type: string
      required:
        - messageText
