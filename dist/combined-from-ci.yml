openapi: 3.0.0
info:
  title: CoWorkerMatch API
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local Server
tags:
  - name: Users
    description: ユーザに関する操作
  - name: Hobbies
    description: 趣味に関する操作
  - name: UserHobbies
    description: ユーザの趣味に関する操作
  - name: Matchings
    description: マッチングに関する操作
  - name: Questions
    description: 2択の質問に関する操作
  - name: QuestionCards
    description: 質問カードに関する操作
  - name: Messages
    description: メッセージに関する操作
paths:
  /users:
    post:
      summary: Create a  new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
    put:
      tags:
        - Users
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 2回目以降ユーザがログインしたときに、Googleのアカウントの名前などが変更されている場合に情報を更新する or 単純にline_accountなどを追加・更新する時に呼ばれる。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Get a user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user_idからユーザ取得
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
  /hobbies:
    get:
      tags:
        - Hobbies
      summary: Get All hobbies with categories
      responses:
        '200':
          description: List of all hobbies with categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHobbyResponse'
    post:
      summary: Create a new hobby
      tags:
        - Hobbies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHobbyRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateHobbyResponse'
  /user_hobbies:
    post:
      summary: Create user new hobbies
      tags:
        - UserHobbies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserHobbyRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserHobbyResponse'
    put:
      tags:
        - UserHobbies
      summary: Update user hobbies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserHobbyRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserHobbyResponse'
  /user_hobbies/{user_id}:
    get:
      tags:
        - UserHobbies
      summary: Get all hobbies of a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user_idからユーザ取得
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserHobbyResponse'
  /matchings:
    get:
      tags:
        - Matchings
      summary: Get All matchings
      responses:
        '200':
          description: List of all matchings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMatchingResponse'
  /matchings/{matching_id}:
    get:
      tags:
        - Matchings
      summary: Get match user
      parameters:
        - name: matching_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get match user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMatchingUserResponse'
  /matching_questions:
    post:
      summary: Create a new matching
      tags:
        - Questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestionRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateQuestionResponse'
    get:
      tags:
        - Questions
      summary: Get user questions
      responses:
        '200':
          description: List of all questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQuestionResponse'
  /question_cards/{matching_id}:
    get:
      tags:
        - QuestionCards
      summary: Get User Questions
      parameters:
        - name: matching_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of all questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQuestionCardResponse'
  /messages/{matching_id}:
    post:
      tags:
        - Messages
      summary: Create a new message
      parameters:
        - name: matching_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMessageResponse'
    get:
      tags:
        - Messages
      summary: Get all messages for a matching
      parameters:
        - name: matching_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of all messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMessageResponse'
  /messages/{message_id}:
    put:
      tags:
        - Messages
      summary: Update a message
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessageRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMessageResponse'
components:
  schemas:
    UserBase:
      type: object
      properties:
        user_name:
          type: string
        email:
          type: string
        avatar_url:
          type: string
      required:
        - user_name
        - email
        - avatar_url
    UpdateUserRequest:
      allOf:
        - $ref: '#/components/schemas/UserBase'
    User:
      allOf:
        - type: object
          properties:
            user_id:
              type: string
              format: uuid
          required:
            - user_id
        - $ref: '#/components/schemas/UserBase'
    UpdateUserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user
    CreateUserRequest:
      allOf:
        - $ref: '#/components/schemas/UserBase'
    CreateUserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user
    GetUserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user
    Category:
      type: object
      properties:
        category_id:
          type: string
          format: uuid
        category_name:
          type: string
      required:
        - category_id
        - category_name
    Hobby:
      type: object
      properties:
        hobby_id:
          type: string
          format: uuid
        hobby_name:
          type: string
      required:
        - hobby_id
        - hobby_name
    GetHobbyResponse:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Category'
          - type: object
            properties:
              hobbies:
                type: array
                items:
                  $ref: '#/components/schemas/Hobby'
            required:
              - hobbies
    CreateHobbyRequest:
      type: object
      properties:
        creator_id:
          type: string
        hobby_name:
          type: string
        category_id:
          type: string
          format: uuid
      required:
        - creator_id
        - hobby_name
        - category_id
    HobbyDetails:
      type: object
      properties:
        hobby_id:
          type: string
          format: uuid
        hobby_name:
          type: string
        creator_id:
          type: string
        category_id:
          type: string
          format: uuid
      required:
        - hobby_id
        - hobby_name
        - creator_id
        - category_id
    CreateHobbyResponse:
      type: object
      properties:
        hobby:
          $ref: '#/components/schemas/HobbyDetails'
      required:
        - hobby
    UserHobby:
      type: object
      properties:
        hobby_ids:
          type: array
          items:
            type: string
            format: uuid
      required:
        - hobby_ids
    UpdateUserHobbyRequest:
      allOf:
        - $ref: '#/components/schemas/UserHobby'
    UpdateUserHobbyResponse:
      allOf:
        - $ref: '#/components/schemas/UserHobby'
    CreateUserHobbyRequest:
      allOf:
        - $ref: '#/components/schemas/UserHobby'
    CreateUserHobbyResponse:
      allOf:
        - $ref: '#/components/schemas/UserHobby'
    GetUserHobbyResponse:
      type: array
      items:
        type: object
        properties:
          hobby_id:
            type: string
            format: uuid
          hobby_name:
            type: string
        required:
          - hobby_id
          - hobby_name
    GetMatchingResponse:
      type: array
      items:
        type: object
        properties:
          matching_id:
            type: string
            format: uuid
          avatar_url:
            type: string
          match_user_name:
            type: string
          last_message:
            type: string
          unread_message_count:
            type: integer
        required:
          - matching_id
          - avatar_url
          - match_user_name
          - last_message
          - unread_message_count
    GetMatchingUserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user
    Choice:
      type: object
      properties:
        choice_text:
          type: string
          example: 'yes'
        choice_image_url:
          type: string
      required:
        - choice_text
        - choice_image_url
    Question:
      type: object
      properties:
        question_id:
          type: string
          format: uuid
        question_text:
          type: string
        choice1:
          $ref: '#/components/schemas/Choice'
        choice2:
          $ref: '#/components/schemas/Choice'
      required:
        - question_id
        - question_text
        - choice1
        - choice2
    GetQuestionResponse:
      type: array
      items:
        $ref: '#/components/schemas/Question'
    Answer:
      type: object
      properties:
        question_id:
          type: string
          format: uuid
        answer:
          type: string
          example: 'yes'
      required:
        - question_id
        - answer
    CreateQuestionRequest:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
      required:
        - answers
    CreateQuestionResponse:
      type: object
      properties:
        matching_id:
          type: string
          format: uuid
        sender_user_id:
          type: string
        receiver_user_id:
          type: string
        matching_date:
          type: string
          format: date-time
      required:
        - matching_id
        - sender_user_id
        - receiver_user_id
        - matching_date
    GetQuestionCardResponse:
      type: array
      items:
        type: object
        properties:
          question_card_id:
            type: string
            format: uuid
          question_card_text:
            type: string
          is_used:
            type: boolean
        required:
          - question_card_id
          - question_card_text
          - is_used
    Message:
      type: object
      properties:
        message_id:
          type: string
          format: uuid
        message_text:
          type: string
      required:
        - message_id
        - message_text
    GetMessageResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            type: object
            properties:
              question_card_id:
                type: string
                format: uuid
              question_card_text:
                type: string
              message_pair:
                type: object
                properties:
                  me:
                    $ref: '#/components/schemas/Message'
                  you:
                    $ref: '#/components/schemas/Message'
                required:
                  - me
                  - you
            required:
              - question_card_id
              - question_card_text
              - message_pair
      required:
        - messages
    CreateMessageRequest:
      type: object
      properties:
        question_card_id:
          type: string
          format: uuid
      required:
        - question_card_id
    CreateMessageResponse:
      type: object
      properties:
        message_id:
          type: string
          format: uuid
      required:
        - message_id
    UpdateMessageRequest:
      type: object
      properties:
        message_text:
          type: string
      required:
        - message_text
    UpdateMessageResponse:
      type: object
      properties:
        message_text:
          type: string
      required:
        - message_text
